{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc;AACzE;AACA;AACA;AACA,CAAC;AACD,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,0BAA0B,mBAAO,CAAC,kBAAM;AACxC;AACA,iCAAiC,mBAAO,CAAC,4DAAqB;AAC9D,+BAA+B,mBAAO,CAAC,wDAAmB;AAC1D,+BAA+B,mBAAO,CAAC,wDAAmB;AAC1D;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uDAAuD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8DAA8D,+BAA+B;AAC7F;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;AC1YY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,kBAAkB;AAChF;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,oCAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,cAAc;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;AC9HF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,kBAAkB;AAChF;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,oCAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,gDAAgD,KAAK;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;;;;;;;;;;ACvFF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,2BAA2B,GAAG,gCAAgC,GAAG,mBAAmB,GAAG,yBAAyB,GAAG,eAAe,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,kBAAkB;AAC5N;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,oCAAe;AAC/C,mBAAmB,mBAAO,CAAC,0BAAU;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,yBAAyB;AACpF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wCAAwC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA,sBAAsB;;;;;;;;;;;ACpJtB,0C;;;;;;;;;;ACAA,qC;;;;;;;;;;ACAA,iC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://nodoze/./src/main/index.ts","webpack://nodoze/./src/main/platforms/linux.ts","webpack://nodoze/./src/main/platforms/macos.ts","webpack://nodoze/./src/main/platforms/windows.ts","webpack://nodoze/external node-commonjs \"child_process\"","webpack://nodoze/external node-commonjs \"electron\"","webpack://nodoze/external node-commonjs \"path\"","webpack://nodoze/webpack/bootstrap","webpack://nodoze/webpack/before-startup","webpack://nodoze/webpack/startup","webpack://nodoze/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\nconst path = __importStar(require(\"path\"));\n// Import platform-specific modules\nconst windowsImpl = __importStar(require(\"./platforms/windows\"));\nconst macosImpl = __importStar(require(\"./platforms/macos\"));\nconst linuxImpl = __importStar(require(\"./platforms/linux\"));\n// Keep a global reference of objects to prevent garbage collection\nlet mainWindow = null;\nlet tray = null;\nlet isPreventingSleep = false;\nlet isAppQuitting = false; // Track app quitting state\n// Get the appropriate platform implementation\nconst getPlatformImpl = () => {\n    switch (process.platform) {\n        case 'win32':\n            return windowsImpl;\n        case 'darwin':\n            return macosImpl;\n        case 'linux':\n            return linuxImpl;\n        default:\n            console.error(`Unsupported platform: ${process.platform}`);\n            return null;\n    }\n};\n// Platform-specific sleep prevention\nconst preventSleep = async () => {\n    if (isPreventingSleep)\n        return;\n    const platformImpl = getPlatformImpl();\n    if (!platformImpl) {\n        console.error('No platform implementation available');\n        return;\n    }\n    try {\n        await platformImpl.preventSleep();\n        isPreventingSleep = true;\n        console.log(`Sleep prevention enabled on ${process.platform}`);\n    }\n    catch (error) {\n        console.error('Error preventing sleep:', error);\n    }\n};\nconst allowSleep = async () => {\n    if (!isPreventingSleep)\n        return;\n    const platformImpl = getPlatformImpl();\n    if (!platformImpl)\n        return;\n    try {\n        await platformImpl.allowSleep();\n        console.log(`Sleep prevention disabled on ${process.platform}`);\n    }\n    catch (error) {\n        console.error('Error allowing sleep:', error);\n    }\n    isPreventingSleep = false;\n};\n/**\n * Creates a proper icon for the tray based on the platform and active state\n */\nfunction createTrayIcon(active = false) {\n    let iconName = active ? 'icon-active.svg' : 'icon-inactive.svg';\n    // Determine the correct path to the icon based on whether the app is packaged\n    const iconPath = path.join(electron_1.app.isPackaged\n        ? path.dirname(electron_1.app.getPath('exe'))\n        : path.join(__dirname, '..'), 'public', iconName);\n    try {\n        // Create a native image from the file\n        const icon = electron_1.nativeImage.createFromPath(iconPath);\n        // For macOS, make it a template image\n        if (process.platform === 'darwin') {\n            icon.setTemplateImage(true);\n        }\n        // Special handling for high-DPI on Windows\n        if (process.platform === 'win32') {\n            // Resize to appropriate size for Windows tray\n            return icon.resize({ width: 16, height: 16 });\n        }\n        return icon;\n    }\n    catch (error) {\n        console.error(`Failed to load tray icon (${iconName}):`, error);\n        // Try using the default icon as fallback\n        try {\n            const fallbackPath = path.join(electron_1.app.isPackaged\n                ? path.dirname(electron_1.app.getPath('exe'))\n                : path.join(__dirname, '..'), 'public', 'icon.svg');\n            return electron_1.nativeImage.createFromPath(fallbackPath);\n        }\n        catch (fallbackError) {\n            // Return a small empty image as last resort fallback\n            return electron_1.nativeImage.createEmpty();\n        }\n    }\n}\n/**\n * Creates a system tray icon with menu\n */\nfunction createTray() {\n    // Don't create a tray if it already exists\n    if (tray !== null)\n        return;\n    // Create the tray icon\n    const icon = createTrayIcon(isPreventingSleep);\n    tray = new electron_1.Tray(icon);\n    tray.setToolTip('NoDoze - Keep Your Computer Awake');\n    // Update the context menu\n    updateTrayMenu();\n    // Show/hide window on tray click\n    tray.on('click', () => {\n        if (mainWindow?.isVisible()) {\n            mainWindow.hide();\n        }\n        else {\n            mainWindow?.show();\n        }\n    });\n}\n/**\n * Updates the tray context menu with the current state\n */\nfunction updateTrayMenu() {\n    if (!tray)\n        return;\n    // Update the icon based on the current sleep prevention state\n    const trayIcon = createTrayIcon(isPreventingSleep);\n    tray.setImage(trayIcon);\n    const contextMenu = electron_1.Menu.buildFromTemplate([\n        {\n            label: 'Open NoDoze',\n            click: () => { mainWindow?.show(); }\n        },\n        {\n            type: 'separator'\n        },\n        {\n            label: 'Prevent Sleep',\n            type: 'checkbox',\n            checked: isPreventingSleep,\n            click: async (menuItem) => {\n                if (menuItem.checked) {\n                    await preventSleep();\n                }\n                else {\n                    await allowSleep();\n                }\n                updateTrayMenu();\n                mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n            }\n        },\n        {\n            type: 'separator'\n        },\n        {\n            label: 'Quick Timer',\n            submenu: [\n                {\n                    label: '15 Minutes',\n                    click: async () => {\n                        await preventSleep();\n                        updateTrayMenu();\n                        mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        mainWindow?.webContents.send('set-quick-timer', 15);\n                        // Set a timeout to disable sleep prevention\n                        setTimeout(async () => {\n                            await allowSleep();\n                            updateTrayMenu();\n                            mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        }, 15 * 60 * 1000);\n                    }\n                },\n                {\n                    label: '30 Minutes',\n                    click: async () => {\n                        await preventSleep();\n                        updateTrayMenu();\n                        mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        mainWindow?.webContents.send('set-quick-timer', 30);\n                        setTimeout(async () => {\n                            await allowSleep();\n                            updateTrayMenu();\n                            mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        }, 30 * 60 * 1000);\n                    }\n                },\n                {\n                    label: '1 Hour',\n                    click: async () => {\n                        await preventSleep();\n                        updateTrayMenu();\n                        mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        mainWindow?.webContents.send('set-quick-timer', 60);\n                        setTimeout(async () => {\n                            await allowSleep();\n                            updateTrayMenu();\n                            mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        }, 60 * 60 * 1000);\n                    }\n                },\n                {\n                    label: '2 Hours',\n                    click: async () => {\n                        await preventSleep();\n                        updateTrayMenu();\n                        mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        mainWindow?.webContents.send('set-quick-timer', 120);\n                        setTimeout(async () => {\n                            await allowSleep();\n                            updateTrayMenu();\n                            mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n                        }, 120 * 60 * 1000);\n                    }\n                }\n            ]\n        },\n        {\n            type: 'separator'\n        },\n        {\n            label: 'Launch at Startup',\n            type: 'checkbox',\n            checked: electron_1.app.getLoginItemSettings().openAtLogin,\n            click: (menuItem) => {\n                electron_1.app.setLoginItemSettings({\n                    openAtLogin: menuItem.checked,\n                    openAsHidden: menuItem.checked // Start minimized in tray\n                });\n            }\n        },\n        {\n            type: 'separator'\n        },\n        {\n            label: 'Quit',\n            click: async () => {\n                await allowSleep();\n                electron_1.app.quit();\n            }\n        }\n    ]);\n    tray.setContextMenu(contextMenu);\n    // Update tray tooltip based on sleep prevention state\n    tray.setToolTip(`NoDoze - ${isPreventingSleep ? 'Sleep Prevention Active' : 'Idle'}`);\n}\nfunction createWindow() {\n    // Create the browser window\n    mainWindow = new electron_1.BrowserWindow({\n        width: 380,\n        height: 450,\n        webPreferences: {\n            nodeIntegration: true,\n            contextIsolation: false,\n        },\n        icon: path.join(electron_1.app.isPackaged ? path.dirname(electron_1.app.getPath('exe')) : path.join(__dirname, '..'), 'public', 'icon.png'),\n        resizable: false,\n    });\n    // Set the title\n    mainWindow.setTitle('NoDoze');\n    console.log('Window title set to NoDoze');\n    // Load the index.html file\n    const indexPath = electron_1.app.isPackaged\n        ? path.join(__dirname, 'index.html')\n        : path.join(__dirname, '../dist/index.html');\n    console.log('Loading index.html from:', indexPath);\n    mainWindow.loadFile(indexPath).then(() => {\n        console.log('Successfully loaded index.html');\n    }).catch(error => {\n        console.error('Failed to load index.html:', error);\n        // Try to show an error message to the user\n        if (mainWindow) {\n            mainWindow.webContents.executeJavaScript(`\r\n        document.body.innerHTML = '<div style=\"padding: 20px; font-family: Arial, sans-serif;\">\r\n          <h2>Failed to load application</h2>\r\n          <p>${error.toString()}</p>\r\n          <p>Please check the console for more details.</p>\r\n        </div>';\r\n      `);\n        }\n    });\n    // Open DevTools for debugging in development mode\n    if (!electron_1.app.isPackaged) {\n        mainWindow.webContents.openDevTools({ mode: 'detach' });\n    }\n    // Handle window close event - hide instead of close\n    mainWindow.on('close', (event) => {\n        if (!isAppQuitting) {\n            event.preventDefault();\n            mainWindow?.hide();\n            return false;\n        }\n        return true;\n    });\n}\n// Initialize platform-specific implementations\nconst initializePlatform = () => {\n    const platformImpl = getPlatformImpl();\n    if (platformImpl) {\n        try {\n            platformImpl.initialize();\n            console.log(`Platform ${process.platform} initialized`);\n        }\n        catch (error) {\n            console.error('Error initializing platform:', error);\n        }\n    }\n};\n// This method will be called when Electron has finished initialization\nelectron_1.app.whenReady().then(() => {\n    initializePlatform();\n    createWindow();\n    createTray();\n    electron_1.app.on('activate', function () {\n        // On macOS it's common to re-create a window when the dock icon is clicked\n        if (electron_1.BrowserWindow.getAllWindows().length === 0)\n            createWindow();\n    });\n});\n// Quit when all windows are closed, except on macOS\nelectron_1.app.on('window-all-closed', function () {\n    if (process.platform !== 'darwin')\n        electron_1.app.quit();\n});\n// IPC handlers for renderer process communication\nelectron_1.ipcMain.on('toggle-sleep-prevention', async (_, shouldPrevent) => {\n    if (shouldPrevent) {\n        await preventSleep();\n    }\n    else {\n        await allowSleep();\n    }\n    // Update the tray menu with the new state\n    updateTrayMenu();\n    // Notify renderer of status change\n    mainWindow?.webContents.send('sleep-status-changed', isPreventingSleep);\n});\nelectron_1.ipcMain.handle('get-sleep-status', () => {\n    return isPreventingSleep;\n});\n// Clean up before quitting\nelectron_1.app.on('before-quit', async () => {\n    // Mark the app as quitting to allow window close\n    isAppQuitting = true;\n    await allowSleep();\n    // Clean up platform-specific resources\n    const platformImpl = getPlatformImpl();\n    if (platformImpl && platformImpl.cleanup) {\n        try {\n            await platformImpl.cleanup();\n        }\n        catch (error) {\n            console.error('Error during platform cleanup:', error);\n        }\n    }\n    // Destroy the tray icon\n    if (tray) {\n        tray.destroy();\n        tray = null;\n    }\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cleanup = exports.allowSleep = exports.preventSleep = exports.initialize = void 0;\n/**\n * Linux platform-specific implementation for NoDoze\n * Uses a combination of dbus and xdg-screensaver commands to prevent sleep\n */\nconst child_process_1 = require(\"child_process\");\nlet inhibitCookie = null;\nlet screenSaverProcess = null;\n/**\n * Initialize Linux sleep prevention systems\n */\nconst initialize = () => {\n    // Nothing specific to initialize for Linux\n    return true;\n};\nexports.initialize = initialize;\n/**\n * Run a command and return its output\n */\nconst executeCommand = (command) => {\n    return new Promise((resolve, reject) => {\n        (0, child_process_1.exec)(command, (error, stdout, stderr) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            resolve(stdout.trim());\n        });\n    });\n};\n/**\n * Prevent the system from sleeping using D-Bus and xdg-screensaver\n */\nconst preventSleep = async () => {\n    if (inhibitCookie || screenSaverProcess) {\n        return true; // Already preventing sleep\n    }\n    try {\n        // Try using dbus-send to inhibit sleep via org.freedesktop.PowerManagement\n        try {\n            const result = await executeCommand('dbus-send --system --print-reply --dest=\"org.freedesktop.login1\" ' +\n                '/org/freedesktop/login1 org.freedesktop.login1.Manager.Inhibit ' +\n                'string:\"sleep\" string:\"NoDoze\" string:\"Preventing system sleep\" ' +\n                'string:\"block\"');\n            // Extract the inhibit cookie from dbus reply\n            const match = result.match(/uint32 (\\d+)/);\n            if (match && match[1]) {\n                inhibitCookie = match[1];\n                console.log(`Linux sleep inhibitor enabled (cookie: ${inhibitCookie})`);\n            }\n        }\n        catch (dbusError) {\n            console.warn('Failed to inhibit sleep via dbus:', dbusError);\n        }\n        // Also use xdg-screensaver to prevent screen blanking\n        // This is a fallback method which works on most desktop environments\n        screenSaverProcess = (0, child_process_1.spawn)('xdg-screensaver', ['suspend', 'nodoze']);\n        screenSaverProcess.on('error', (err) => {\n            console.error('xdg-screensaver error:', err);\n            screenSaverProcess = null;\n        });\n        console.log('Linux sleep prevention enabled');\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to prevent sleep on Linux:', error);\n        return false;\n    }\n};\nexports.preventSleep = preventSleep;\n/**\n * Allow the system to sleep normally\n */\nconst allowSleep = async () => {\n    try {\n        // Release D-Bus inhibitor if we have one\n        if (inhibitCookie) {\n            try {\n                await executeCommand('dbus-send --system --print-reply --dest=\"org.freedesktop.login1\" ' +\n                    `/org/freedesktop/login1 org.freedesktop.login1.Manager.UnInhibit ` +\n                    `uint32:${inhibitCookie}`);\n            }\n            catch (dbusError) {\n                console.warn('Failed to uninhibit via dbus:', dbusError);\n            }\n            inhibitCookie = null;\n        }\n        // Kill the screensaver process if it's running\n        if (screenSaverProcess) {\n            screenSaverProcess.kill();\n            screenSaverProcess = null;\n            // Also run xdg-screensaver resume to be sure\n            try {\n                await executeCommand('xdg-screensaver resume nodoze');\n            }\n            catch (error) {\n                console.warn('xdg-screensaver resume warning:', error);\n            }\n        }\n        console.log('Linux sleep prevention disabled');\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to restore sleep settings on Linux:', error);\n        return false;\n    }\n};\nexports.allowSleep = allowSleep;\n/**\n * Clean up resources\n */\nconst cleanup = async () => {\n    try {\n        await (0, exports.allowSleep)();\n    }\n    catch (error) {\n        console.error('Error during Linux cleanup:', error);\n    }\n    inhibitCookie = null;\n    if (screenSaverProcess) {\n        screenSaverProcess.kill();\n        screenSaverProcess = null;\n    }\n};\nexports.cleanup = cleanup;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cleanup = exports.allowSleep = exports.preventSleep = exports.initialize = void 0;\n/**\n * macOS platform-specific implementation for NoDoze\n * Uses IOKit power assertions to prevent sleep\n */\nconst child_process_1 = require(\"child_process\");\nlet assertionId = null;\n/**\n * Initialize macOS sleep prevention\n */\nconst initialize = () => {\n    // Nothing specific to initialize for macOS\n    return true;\n};\nexports.initialize = initialize;\n/**\n * Helper function to execute macOS caffeinate command\n */\nconst executeCaffeinate = (args) => {\n    return new Promise((resolve, reject) => {\n        (0, child_process_1.exec)(`caffeinate ${args}`, (error, stdout, stderr) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            resolve(stdout.trim());\n        });\n    });\n};\n/**\n * Prevent the system from sleeping\n * Uses the built-in caffeinate command on macOS\n */\nconst preventSleep = async () => {\n    if (assertionId) {\n        return true; // Already preventing sleep\n    }\n    try {\n        // Start caffeinate in background mode to prevent display and system sleep\n        // -d prevents display sleep, -i prevents idle sleep\n        assertionId = await executeCaffeinate('-d -i &');\n        console.log(`Sleep prevention enabled on macOS (PID: ${assertionId})`);\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to prevent sleep on macOS:', error);\n        return false;\n    }\n};\nexports.preventSleep = preventSleep;\n/**\n * Allow the system to sleep normally\n * Terminates the caffeinate process\n */\nconst allowSleep = async () => {\n    if (!assertionId) {\n        return true; // Nothing to restore\n    }\n    try {\n        // Kill the caffeinate process\n        await executeCaffeinate(`kill ${assertionId}`);\n        console.log('Sleep prevention disabled on macOS');\n        assertionId = null;\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to restore sleep settings on macOS:', error);\n        return false;\n    }\n};\nexports.allowSleep = allowSleep;\n/**\n * Clean up resources\n */\nconst cleanup = async () => {\n    if (assertionId) {\n        try {\n            await (0, exports.allowSleep)();\n        }\n        catch (error) {\n            console.error('Error during macOS cleanup:', error);\n        }\n        assertionId = null;\n    }\n};\nexports.cleanup = cleanup;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPowerStatus = exports.getLastActivityTime = exports.isPreventingDisplaySleep = exports.getInterval = exports.isPreventingSleep = exports.cleanup = exports.allowSleep = exports.preventSleep = exports.initialize = void 0;\n/**\n * Windows platform-specific implementation for NoDoze\n * Uses Electron's built-in powerSaveBlocker API to prevent sleep\n */\nconst child_process_1 = require(\"child_process\");\nconst electron_1 = require(\"electron\");\n// Track state\nlet intervalSeconds = 59; // Default interval\nlet isActive = false;\nlet lastActivityTime = null;\nlet preventDisplaySleep = true; // Default to also prevent display sleep\nlet statusLogTimer = null;\n// Track blockers\nlet displayBlockerId = -1;\nlet systemBlockerId = -1;\n/**\n * Initialize Windows sleep prevention\n */\nconst initialize = () => {\n    // Nothing specific to initialize for Windows\n    return true;\n};\nexports.initialize = initialize;\n/**\n * Prevent the system from going to sleep\n * Uses Electron's powerSaveBlocker API\n * @param seconds Optional parameter to set the interval in seconds (default: 59)\n * @param keepDisplayOn Optional parameter to also keep the display on (default: true)\n */\nconst preventSleep = async (seconds = 59, keepDisplayOn = true) => {\n    try {\n        // Kill any existing process first\n        await (0, exports.allowSleep)();\n        // Store the settings\n        intervalSeconds = seconds;\n        preventDisplaySleep = keepDisplayOn;\n        // Start system sleep prevention\n        systemBlockerId = electron_1.powerSaveBlocker.start('prevent-app-suspension');\n        // Also prevent display sleep if requested\n        if (keepDisplayOn) {\n            displayBlockerId = electron_1.powerSaveBlocker.start('prevent-display-sleep');\n        }\n        // Create a timer to log status periodically (actual prevention is handled by powerSaveBlocker)\n        statusLogTimer = setInterval(() => {\n            console.log(`NoDoze: Keeping system awake at ${new Date().toISOString()}`);\n        }, seconds * 1000);\n        // Track activity status and time\n        isActive = true;\n        lastActivityTime = new Date();\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to prevent sleep:', error);\n        isActive = false;\n        return false;\n    }\n};\nexports.preventSleep = preventSleep;\n/**\n * Allow the system to go to sleep by stopping the sleep prevention\n */\nconst allowSleep = async () => {\n    try {\n        if (statusLogTimer) {\n            clearInterval(statusLogTimer);\n            statusLogTimer = null;\n        }\n        // Stop the power save blockers\n        if (displayBlockerId !== -1 && electron_1.powerSaveBlocker.isStarted(displayBlockerId)) {\n            electron_1.powerSaveBlocker.stop(displayBlockerId);\n            displayBlockerId = -1;\n        }\n        if (systemBlockerId !== -1 && electron_1.powerSaveBlocker.isStarted(systemBlockerId)) {\n            electron_1.powerSaveBlocker.stop(systemBlockerId);\n            systemBlockerId = -1;\n        }\n        isActive = false;\n        return true;\n    }\n    catch (error) {\n        console.error('Failed to allow sleep:', error);\n        return false;\n    }\n};\nexports.allowSleep = allowSleep;\n/**\n * Clean up resources before application exit\n */\nconst cleanup = async () => {\n    return await (0, exports.allowSleep)();\n};\nexports.cleanup = cleanup;\n/**\n * Check if sleep prevention is active\n */\nconst isPreventingSleep = () => {\n    return isActive;\n};\nexports.isPreventingSleep = isPreventingSleep;\n/**\n * Get the current interval setting in seconds\n */\nconst getInterval = () => {\n    return intervalSeconds;\n};\nexports.getInterval = getInterval;\n/**\n * Get whether display sleep is also being prevented\n */\nconst isPreventingDisplaySleep = () => {\n    return preventDisplaySleep;\n};\nexports.isPreventingDisplaySleep = isPreventingDisplaySleep;\n/**\n * Get the timestamp of the last activity\n */\nconst getLastActivityTime = () => {\n    return lastActivityTime;\n};\nexports.getLastActivityTime = getLastActivityTime;\n/**\n * Check the system's current power status\n * Returns information about battery/AC power and current power plan\n */\nconst getPowerStatus = async () => {\n    return new Promise((resolve, reject) => {\n        (0, child_process_1.exec)('powercfg /list', (error, stdout) => {\n            if (error) {\n                console.error('Error getting power status:', error);\n                resolve({ onBattery: false, powerPlan: 'Unknown' });\n                return;\n            }\n            // Get power plan info\n            const activePlanMatch = stdout.match(/\\* (.*?) \\((.*?)\\)/);\n            const powerPlan = activePlanMatch ? activePlanMatch[1] : 'Unknown';\n            // Check if system is on battery\n            (0, child_process_1.exec)('WMIC Path Win32_Battery Get BatteryStatus', (err, output) => {\n                // BatteryStatus = 1 means on battery, 2 means on AC power\n                // If there's no battery or an error, assume AC power\n                const onBattery = !err && output.includes('1');\n                resolve({ onBattery, powerPlan });\n            });\n        });\n    });\n};\nexports.getPowerStatus = getPowerStatus;\n","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main/index.ts\");\n",""],"names":[],"sourceRoot":""}